#include <iostream>
using namespace std;

class Node {
public:
    int value;
    Node* left;
    Node* right;

    Node(int val) {
        value = val;
        left = right = NULL;
    }
};

Node* createNode(int val) {
    return new Node(val);
}

void displayTree(Node* root, int level = 0) {
    if (!root) return;
    for (int i = 0; i < level; i++)
        cout << "   ";
    cout << "- " << root->value << endl;
    displayTree(root->left, level + 1);
    displayTree(root->right, level + 1);
}

int calculateSubtreeSum(Node* root, int targetSum, bool &isFound, Node* &targetSubtree) {
    if (!root) return 0;

    int leftSum = calculateSubtreeSum(root->left, targetSum, isFound, targetSubtree);
    int rightSum = calculateSubtreeSum(root->right, targetSum, isFound, targetSubtree);

    int totalSum = root->value + leftSum + rightSum;

    if (totalSum == targetSum && !isFound) {
        isFound = true;
        targetSubtree = root;
    }

    return totalSum;
}

int main() {
    Node* root = createNode(5);
    root->left = createNode(3);
    root->right = createNode(8);
    root->left->left = createNode(2);
    root->left->right = createNode(4);
    root->right->left = createNode(6);
    root->right->right = createNode(10);

    int targetSum;
    cout << "Enter target subtree sum: ";
    cin >> targetSum;

    bool isFound = false;
    Node* targetSubtree = NULL;

    calculateSubtreeSum(root, targetSum, isFound, targetSubtree);

    if (isFound) {
        cout << "\nSubtree found with sum " << targetSum << ":\n";
        displayTree(targetSubtree);
    } else {
        cout << "\nNo subtree with sum " << targetSum << " found.\n";
    }

    return 0;
}
